swagger: "2.0"
info:
  description: "This API takes information abour Warehouses, trucks and packages for the creation of routes"
  title: Kurztrip Analyse
  version: '1.0'
host: localhost:8000
basePath: /
tags:
  - name: "Trucks"
    description: "Add, modify and delete Trucks information"
  - name: "Packages"
    description: "Add, modify and delete Packages information"
  - name: "Warehouses"
    description: "Add, modify and delete Warehouses information"
paths:
  /trucks:
    get:
      tags:
        - "Trucks"
      summary: "Return all Trucks"
      description: ""
      operationId: "findTrucks"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Truck"
    post:
      tags:
        - "Trucks"
      summary: "Adds a truck"
      description: ""
      operationId: "addTrucks"
      parameters:
        - in: "body"
          name: "body"
          description: "Truck object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/TruckRequest"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Truck"
        '400':
          description: "invalid Warehouse or duplicated Id"
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: The warehouse id doesn't exist
        '422':
          description: "The body does not adjust to the required specification"
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Unprocessable Entity
  /trucks/{id}:
    get:
      tags:
        - "Trucks"
      summary: "Finds a truck"
      description: ""
      operationId: "findTruck"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of truck to return"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Truck"
        '404':
          description: Truck not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
    put:
      tags:
        - "Trucks"
      summary: "updates a trucks"
      description: ""
      operationId: "updateTruck"
      parameters:
        - in: "body"
          name: "body"
          description: "Truck object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/TruckRequest"
        - name: "id"
          in: "path"
          description: "ID of truck to update"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Truck"
        '400':
          description: Invalid warehouse
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: The warehouse id doesn't exist
        '404':
          description: Truck not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
    delete:
      tags:
        - "Trucks"
      summary: "Deletes a truck"
      description: ""
      operationId: "deleteTruck"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of truck to delete"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            type: "integer"
            example: 1
        '404':
          description: Truck not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
  /trucks/{id}/state:
    put:
      tags:
        - "Trucks"
      summary: "updates the state of a trucks"
      description: ""
      operationId: "updateState"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of truck to update"
          required: true
          type: "integer"
          format: "int64"
        - in: query
          name: state
          required: true
          type : "string"
          enum:
            - "Available"
            - "Maintenance"
            - "Unavailable"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Truck"
        '400':
          description: Invalid warehouse
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: The warehouse id doesn't exist
        '404':
          description: Truck not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
  /packages:
    get:
      tags:
        - "Packages"
      summary: "Finds all packages"
      description: ""
      operationId: "findPackages"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Package"
    post:
      tags:
        - "Packages"
      summary: "Adds a package"
      description: ""
      operationId: "addPackage"
      parameters:
        - in: "body"
          name: "body"
          description: "Package object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Package"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Package"
        '400':
          description: Invalid warehouse or duplicated id
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: The warehouse id doesn't exist
        '422':
          description: Unprocessable Entity
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Unprocessable Entity
  /packages/{id}:
    get:
      tags:
        - "Packages"
      summary: "Finds a package"
      description: ""
      operationId: "findPackage"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of package to return"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Package"
        '404':
          description: Package not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
    put:
      tags:
        - "Packages"
      summary: "Updates a package"
      description: ""
      operationId: "updatePackage"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of package to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Package object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Package"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Package"
        '400':
          description: Invalid warehouse
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: The warehouse id doesn't exist
        '422':
          description: Unprocessable Entity
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Unprocessable Entity
    delete:
      tags:
        - "Packages"
      summary: "Deletes a package"
      description: ""
      operationId: "deletePackage"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of package to delete"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            type: "integer"
            example: 1
        '404':
          description: Package not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
  /warehouses:
    get:
      tags:
        - "Warehouses"
      summary: "Finds all packages"
      description: ""
      operationId: "findWarehouses"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Warehouse"
    post:
      tags:
        - "Warehouses"
      summary: "Adds a package"
      description: ""
      operationId: "addWarehouse"
      parameters:
        - in: "body"
          name: "body"
          description: "Warehouse object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Warehouse"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Warehouse"
        '400':
          description: Duplicated id
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: "The id already exist"
        '422':
          description: Unprocessable Entity
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Unprocessable Entity
  /warehouses/{id}:
    get:
      tags:
        - "Warehouses"
      summary: "Finds a package"
      description: ""
      operationId: "findWarehouse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of warehouse to return"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Warehouse"
        '404':
          description: Warehouse not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
    put:
      tags:
        - "Warehouses"
      summary: "Updates a warehouse"
      description: ""
      operationId: "updateWarehouse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of warehouse to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Warehouse object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Warehouse"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Warehouse"
        '422':
          description: Unprocessable Entity
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Unprocessable Entity
    delete:
      tags:
        - "Warehouses"
      summary: "Deletes a warehouse"
      description: ""
      operationId: "deleteWarehouse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of warehouse to delete"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            type: "integer"
            example: 1
        '404':
          description: Warehouse not found
          schema:
            properties:
              state:
                type: "string"
                example: "error"
              reason:
                type: "string"
                example: Not Found
  /warehouses/<id>/trucks:
    get:
      tags:
        - "Warehouses"
      summary: "Returns all the Trucks in a Warehouse"
      description: ""
      operationId: "findTrucksInWarehouse"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Truck"
  /warehouses/<id>/packages:
    get:
      tags:
        - "Warehouses"
      summary: "Finds all the packages in a warehouse"
      description: ""
      operationId: "findPackagesInWarehouse"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Succesful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Package"

definitions:
  Truck:
    type: "object"
    required:
      - "id"
      - "packages"
      - "fuel_capacity"
      - "fuel_type"
      - "fuel_by_kilometer"
      - "weight_capacity"
      - "volume_capacity"
      - "state"
      - "warehouse"
    properties:
      id:
        type: "integer"
        format: "int32"
      packages:
        type: array
        items:
          $ref: "#/definitions/Package"
      route:
        type: array
        items:
          $ref: "#/definitions/Coordinates"
      fuel_capacity:
        type: "number"
        format: "float"
      fuel_type:
        type : "string"
        enum:
          - "Gasoline"
          - "Diesel"
          - "Gas"
      fuel:
        type: "number"
        format: "float"
      fuel_by_kilometer:
        type: "number"
        format: "float"
      weight_capacity:
        type: "number"
        format: "float"
      volume_capacity:
        type: "number"
        format: "float"
      warehouse:
        type: "integer"
        format: "int32"
      state:
        type : "string"
        enum:
          - "Available"
          - "Maintenance"
          - "Unavailable"
  TruckRequest:
    type: "object"
    required:
      - "id"
      - "fuel_capacity"
      - "fuel_type"
      - "fuel_by_kilometer"
      - "weight_capacity"
      - "volume_capacity"
      - "state"
      - "warehouse"
    properties:
      id:
        type: "integer"
        format: "int32"
      fuel_capacity:
        type: "number"
        format: "float"
      fuel_type:
        type : "string"
        enum:
          - "Gasoline"
          - "Diesel"
          - "Gas"
      fuel_by_kilometer:
        type: "number"
        format: "float"
      weight_capacity:
        type: "number"
        format: "float"
      volume_capacity:
        type: "number"
        format: "float"
      warehouse:
        type: "integer"
        format: "int32"
      state:
        type : "string"
        enum:
          - "Available"
          - "Maintenance"
          - "Unavailable"
  Package:
    type: "object"
    required:
      - "id"
      - "volume"
      - "weight"
      - "destination"
      - "receiver"
      - "sender"
      - "warehouse"
    properties:
      id:
        type: "integer"
        format: "int32"
      volume:
        type: "number"
        format: "float"
      destination:
        $ref: "#/definitions/Coordinates"
      receiver:
        type: "string"
      sender:
        type: "string"
      warehouse:
        type: "integer"
        format: "int32"
  Coordinates:
    required:
      - "coordinates"
    properties:
      coordinates:
        type: "array"
        items:
          type: "number"
          format: "float"
        minItems: 2
        maxItems: 2
  Warehouse:
    required:
      - "id"
      - "name"
      - "location"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: string
      location:
        $ref: "#/definitions/Coordinates"